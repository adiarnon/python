import socket
import os

# TO DO: set constants
IP = '0.0.0.0'
PORT = 80
SOCKET_TIMEOUT = 0.1

def handle_files_end(resource):
    end = extension(resource)
    print("end= " + end)
    content_type = ""
    if end == "html" or end == "txt":
        content_type = "Content-Type: text/html; charset=utf-8"
    elif end == "jpg" :
        content_type = "Content-Type: image/jpeg"
    elif end == "js" :
        content_type = "Content-Type: text/javascript; charset=UTF-8"
    elif end == "css" :
        content_type = "Content-Type: text/css"
    return content_type

def extension(resource):
    last_dot_index = resource.rfind('.')
    if last_dot_index != -1:  # Ensure the character is found
        end = resource[last_dot_index+1:]  # From the dot to the end
    else:
        end = resource  # If no dot is found, return the whole string
    print("the end is: " + end)  # Output: .txt
    return end


def validate_http_request(request):
    """
    Check if request is a valid HTTP request and returns TRUE / FALSE and the requested URL
    """
    r1=request.split("\r\n")
    r=r1[0].split(' ')
    if r[0].upper() == "GET" and r[2].upper() == "HTTP/1.1" and r[1].startswith("/"):
        return True,r[1]
    else :
        return False,r[1]

def handle_client_request(resource, client_socket):
    """ Check the required resource, generate proper HTTP response and send to client"""
    # TO DO : add code that given a resource (URL and parameters) generates the proper response
    try:
        if resource == "/":
            resource="/index.html"
        resource1 = "c:/networks" + resource
        print(resource1)
        if resource == "/page.html":
            redirect_url = "/page1.html"
            response_header = f"HTTP/1.1 302 Found\r\nLocation: {redirect_url}\r\n\r\n"
            client_socket.sendall(response_header.encode())
            print(f"Redirecting to: {redirect_url}")
        if os.path.isfile(resource1):
            if extension(resource) == "py":
                response_body = "403 Forbidden"
                response_header = f"HTTP/1.1 403 Forbidden\r\nContent-Type: text/plain\r\nContent-Length: {len(response_body)}\r\n\r\n"
                response = response_header.encode() + response_body.encode()
                client_socket.sendall(response)
                print(f"Access forbidden: {resource}")
                print("error 403")
            else:
                with open(resource1, 'rb') as file:
                    file_content = file.read()

                # Construct the HTTP response
                response_body = file_content
                response_header = f"HTTP/1.0 200 OK\r\n{handle_files_end(resource)} \r\nContent-Length: {len(response_body)}\r\n\r\n"
                response = response_header.encode() + response_body
                print("the response is: " + (str)(response))
                #x = handle_files_end(resource)
                #print (x)
                # Send the response to the client
                client_socket.sendall(response)
                print(f"Sent file: {resource}")
        else:
            # Handling 404 Not Found
            response_body = "404 Not Found"
            response_header = f"HTTP/1.1 404 Not Found\r\ntext/plain\r\nContent-Length: {len(response_body)}\r\n\r\n"
            response = response_header.encode() + response_body.encode()
            client_socket.sendall(response)
            print("File not found: " + resource)

    except Exception as e:
        response_body = "500 Internal Server Error"
        response_header = f"HTTP/1.1 500 Internal Server Error\r\nContent-Type: text/plain\r\nContent-Length: {len(response_body)}\r\n\r\n"
        response = response_header.encode() + response_body.encode()
        client_socket.sendall(response)
        print(f"Error processing request: {e}")

def handle_client(client_socket):
    """ Handles client requests: verifies client's requests are legal HTTP, calls function to handle the requests """
    print('Client connected')
    #client_socket.send("request please".encode())
    while True:
        client_request=client_socket.recv(1024).decode()
        print(client_request)
        valid_http, resource = validate_http_request(client_request)
        print(valid_http)
        if valid_http:
            print('Got a valid HTTP request')
            namefile = handle_client_request(resource, client_socket)
            msg=f"the File name is: {namefile}"
            print(msg)
            client_socket.send(msg.encode())
            break
        else:
            response_body = "500 Internal Server Error"
            response_header = f"HTTP/1.1 500 Internal Server Error\r\nContent-Type: text/plain\r\nContent-Length: {len(response_body)}\r\n\r\n"
            response = response_header.encode() + response_body.encode()
            client_socket.sendall(response)
            print(f"Error processing request: {response}")
            break  # Exit the loop if there's an error
    print('Closing connection')
    client_socket.send("\r\nclosing connection".encode())
    client_socket.close()

def main():
    # Open a socket and loop forever while waiting for clients
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((IP, PORT))
    server_socket.listen()
    print("Listening for connections on port {}".format(PORT))

    while True:
        client_socket, client_address = server_socket.accept()
        print('New connection received')
        client_socket.settimeout(SOCKET_TIMEOUT)
        handle_client(client_socket)

if __name__ == "__main__":
    # Call the main handler function
    main()
